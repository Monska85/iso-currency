<?php

namespace IsoCurrency;

use IsoCurrency\Exception\InvalidCurrencyException;

/**
 * Generated class IsoCurrency
 {% for currencyCode in currencyCodes %}
* @method static IsoCurrency {{ currencyCode }}($customMinorUnit = null)
 {% endfor %}
*/
class IsoCurrency
{
    /** @var  string */
    private $code;

    /** @var int */
    private $numericCode;

    /** @var int */
    private $minorUnit;

    const CURRENCIES = [
 {% for currency in currencies %}
    '{{ currency.alphabeticCode }}' => ['numericCode' => {{ currency.numericCode }}, 'minorUnit' => {{ currency.minorUnit }}],
 {% endfor %}
    ];

    public function __construct($currencyCode, $customMinorUnit = null)
    {
        if (preg_match('/^[a-zA-Z0-9]+$/', $currencyCode) !== 1) {
            throw new InvalidCurrencyException('The currency code must be alphanumeric and non empty.');
        }

        if (!isset(self::CURRENCIES[$currencyCode])) {
            throw new InvalidCurrencyException('Undefined currency code.');
        }

        if ($customMinorUnit < 0) {
            throw new InvalidCurrencyException('minorUnit cannot be less than zero.');
        }

        $this->code = $currencyCode;
        $this->numericCode = self::CURRENCIES[$currencyCode]['numericCode'];
        $this->minorUnit = $customMinorUnit ?: self::CURRENCIES[$currencyCode]['minorUnit'];
    }

    public static function create($currencyCode, $customMinorUnit = null)
    {
        return new self($currencyCode,$customMinorUnit);
    }

    public static function __callStatic($currencyCode, $params = [])
    {
        $customMinorUnit = isset($params[0]) ? $params[0] : null;
        return self::create($currencyCode, $customMinorUnit);
    }

    /**
    * @inheritdoc
    * @return array
    */
    public function jsonSerialize()
    {
        return [
            'code' => $this->code,
            'numeric_code' => $this->numericCode,
            'minor_unit' => $this->minorUnit,
        ];
    }

    public function __toString()
    {
        return $this->code;
    }

    /**
    * Returns currency code.
    * @return string
    */
    public function getCode() {
        return $this->code;
    }

    /**
    * Returns minor unit.
    * @return int
    */
    public function getMinorUnit() {
        return $this->minorUnit;
    }

    /**
    * Returns whether this IsoCurrency is equal to the given currency.
    * @param IsoCurrency $currency
    * @return bool
    */
    public function is(IsoCurrency $currency) {
        return $this->code === $currency->getCode();
    }
}
